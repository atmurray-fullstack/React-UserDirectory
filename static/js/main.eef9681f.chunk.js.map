{"version":3,"sources":["EmployeeComponent/EmployeeComponent.jsx","SupervisorButton/SupervisorButton.jsx","Views/EmployeeDirectory.jsx","App.js","serviceWorker.js","index.js"],"names":["EmployeeDirectory","props","EmployeeData","className","map","el","key","name","job","dept","supervisor","SupervisorButton","supeArr","forEach","index","includes","push","i","length","id","onClick","type","useState","emp","setEmp","handleSupeButtonPress","event","arr","x","target","typeSort","sort","empArr","sortArr","ind","console","log","EmployeeComponent","App","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eef9681f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst EmployeeDirectory = (props) => {\r\n    const { EmployeeData } = props;\r\n\r\n    return (\r\n        <ul className=\"list-group\">\r\n            {EmployeeData.map(el => (\r\n\r\n                <li className=\"list-group-item text-center\" key={el.key}>\r\n                    <div className=\"card\">\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">{el.name}</h5>\r\n                            <h6 className=\"card-subtitle mb-2 text-muted\">Role: {el.job}</h6>\r\n                            <p className=\"card-text\">Dept.: {el.dept}</p>\r\n                            <p className='card-text'>Employee Supervisor: {el.supervisor}</p>\r\n\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n\r\n    );\r\n}\r\n\r\nexport default EmployeeDirectory;","import React from 'react';\r\n\r\nconst SupervisorButton = (props) => {\r\n\r\n    const { EmployeeData } = props\r\n    let supeArr = [];\r\n    EmployeeData.forEach((el, index) => {\r\n        return supeArr.includes(el.supervisor) ?\r\n            null :\r\n            supeArr.push(el.supervisor)\r\n    })\r\n    for (let i = 0; i < supeArr.length; i++) {\r\n        supeArr[i] = {\r\n            key: i,\r\n            supervisor: supeArr[i]\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <h2>Filter by Supervisor</h2>\r\n            <ul className='list-group text-left'>\r\n                {\r\n                    supeArr.map(el => (\r\n                        <li className=\"list-group-item text-center\" key={el.key}>\r\n                            <button id={el.supervisor} onClick={props.onClick} type=\"button\" className=\"btn btn-dark btn-block \">{el.supervisor}</button>\r\n\r\n                        </li>\r\n\r\n                    ))\r\n                }\r\n            </ul>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default SupervisorButton;","import React, { useState } from 'react';\r\n\r\nimport EmployeeComponent from '../EmployeeComponent/EmployeeComponent'\r\nimport SupervisorButton from '../SupervisorButton/SupervisorButton'\r\n\r\n\r\nconst EmployeeDirectory = (props) => {\r\n\r\n    let { EmployeeData } = props;\r\n    const [emp, setEmp] = useState(EmployeeData)\r\n\r\n    const handleSupeButtonPress = (event) => {\r\n        let arr = [];\r\n        if (event === 'all') {\r\n            setEmp(EmployeeData)\r\n            return\r\n        }\r\n        let x = event.target.id;\r\n        EmployeeData.forEach(el => {\r\n            if (el.supervisor === x) {\r\n                arr.push(el)\r\n            }\r\n        })\r\n        setEmp(arr)\r\n    }\r\n\r\n    const typeSort = (event) => {\r\n        let sort = ''\r\n        let empArr = [];\r\n        event.target.id === 'dept' ? sort = 'dept' : sort = 'job'\r\n        let sortArr = [];\r\n        EmployeeData.forEach((el, ind) => {\r\n            if (sortArr.includes(el[sort])) {\r\n                return\r\n            }\r\n            empArr.push(el);\r\n            for (let i = ind + 1; i < EmployeeData.length; i++) {\r\n\r\n                if (EmployeeData[i][sort] === el[sort]) {\r\n                    console.log(EmployeeData[i][sort])\r\n                    sortArr.push(EmployeeData[i][sort]);\r\n                    empArr.push(EmployeeData[i]);\r\n                }\r\n            }\r\n        })\r\n\r\n        setEmp(empArr)\r\n    }\r\n\r\n    return (\r\n        <div className='row'>\r\n            <div className='col-3 d-flex flex-column mt-4'>\r\n                <button id='dept' onClick={(event) => { typeSort(event) }} type=\"button\" className=\"btn btn-primary btn-lg mb-5 mt-3\">Sort by Dept</button>\r\n                <button id='job' onClick={(event) => { typeSort(event) }} type=\"button\" className=\"btn btn-secondary btn-lg mb-5\">Sort by Job</button>\r\n                <button type=\"button\" className=\"btn btn-danger btn-lg mb-4\" onClick={() => { handleSupeButtonPress('all') }}>Display All Employees</button>\r\n\r\n                <SupervisorButton onClick={(event) => handleSupeButtonPress(event)} EmployeeData={EmployeeData} />\r\n            </div>\r\n\r\n            <div className='col-6 d-flex flex-column mx-auto align-center '>\r\n\r\n                <EmployeeComponent EmployeeData={emp} />\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default EmployeeDirectory;","import React, { useState } from 'react';\nimport './App.css';\n\n\nimport EmployeeDirectory from './Views/EmployeeDirectory';\n\n\nfunction App() {\n\n  const [data, setData] = useState([\n    {\n      key: 1,\n      name: 'John',\n      job: 'developer',\n      dept: 'technology',\n      supervisor: 'Jak',\n\n    },\n    {\n      key: 9,\n      name: 'Eun-Kyung',\n      job: 'paralegal',\n      dept: 'legal',\n      supervisor: 'CEO',\n\n    },\n    {\n      key: 7,\n      name: 'Ben',\n      job: 'writer',\n      dept: 'advertising',\n      supervisor: 'Marcus',\n\n    },\n    {\n      key: 2,\n      name: 'Dean',\n      job: 'developer',\n      dept: 'technology',\n      supervisor: 'Jak',\n\n    },\n    {\n      key: 3,\n      name: 'Ankit',\n      job: 'developer',\n      dept: 'technology',\n      supervisor: 'Jak'\n\n    },\n    {\n      key: 4,\n      name: 'John Hancock',\n      job: 'lawyer',\n      dept: 'legal',\n      supervisor: 'CEO',\n\n    },\n    {\n      key: 5,\n      name: 'Wendy',\n      job: 'artist',\n      dept: 'advertising',\n      supervisor: 'Marcus',\n\n    },\n    {\n      key: 6,\n      name: 'Andrew',\n      job: 'developer',\n      dept: 'advertising',\n      supervisor: 'Marcus',\n\n    },\n  ])\n\n\n\n  return (\n\n    <EmployeeDirectory EmployeeData={data}>\n    </EmployeeDirectory>\n\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}